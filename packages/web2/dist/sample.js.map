{
  "version": 3,
  "sources": ["../src/jsxxx.js", "../src/sample.jsx"],
  "sourcesContent": ["\r\n/* ************************ UTILITY ******************************* */\r\n\r\n/** \r\nSimply creates the object that describes the the html element\r\nthat will later be created from it. This is also place where you can add your own customizations\r\nby making conventions for usage interpreting them them here.\r\n*/\r\nexport function h(tag,attr, ...children){\r\n  return {tag, attr, children};\r\n}\r\n\r\n/** insert HMTL based on tag description */\r\nexport function insertHtml(parent, before, def){\r\n    if (typeof def == 'string') {\r\n        parent.insertBefore(document.createTextNode(def), before);\r\n    } else if(def instanceof Array){\r\n        def.forEach(function (c) { insertHtml(parent, null, c);} );\r\n    } else {\r\n        var n = document.createElement(def.tag);\r\n        if (def.attr) {\r\n            for (var a in def.attr) {\r\n                n.setAttribute(a, def.attr[a]);\r\n            }\r\n        }\r\n        parent.insertBefore(n, before);\r\n        if (def.children && def.children.length) {\r\n            insertHtml(n, null, def.children);\r\n        }\r\n    }\r\n}\r\n\r\n/** To simplify, we just clear the element and add new nodes (no vnode diff is performed) */\r\nexport function applyHtml(parent, def){\r\n    if(typeof parent == 'string') parent = document.getElementById(parent);\r\n    parent.innerHTML = ''; // reset\r\n    insertHtml(parent, null, def);\r\n}", "import { h } from './jsxxx'\r\n\r\nlet  form = <div></div>\r\n\r\nconsole.log('form', form)\r\n"],
  "mappings": "MAQO,WAAW,EAAI,KAAS,EAAS,CACtC,MAAO,CAAC,MAAK,OAAM,YCPrB,GAAK,GAAO,EAAC,MAAD,MAEZ,QAAQ,IAAI,OAAQ",
  "names": []
}
